# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ master ]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv==2022.7.4
        pipenv lock --requirements > requirements.txt
        pip install -r requirements.txt
    # - name: Lint with flake8
    #   run: |
    #     pip install flake8
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    # - name: Test with pytest
    #   run: |
    #     pip install pytest
    #     pytest
#     - name: Deploy
#       run: |
#         ls -l
#         pyinstaller src/app.py
#     - name: copy file via ssh key
#       uses: appleboy/scp-action@master
#       env:
#         HOST: ${{ secrets.HOST }}
#         USERNAME: ${{ secrets.USERNAME }}
#         PORT: ${{ secrets.PORT }}
#         KEY: ${{ secrets.KEY }}
#       with:
#         source: "dist/, src/, tests/"
#         target: "/home/ubuntu/temp"
    # - if: job.status == 'success' and ${{ github.event_name == 'push' }}
    #   name: Perform database migration
    #   uses: garygrossgarten/github-action-ssh@release
    #   with:
    #     command: |
    #       cd "/home/ubuntu/pid_generator"
    #       # cd "frontend/imageTranslateApp"
    #       # pipenv run python manage.py makemigrations
    #       # pipenv run python manage.py migrate
    #       chmod 777 pid-generator
    #     host: ${{ secrets.HOST }}
    #     username: ${{ secrets.USERNAME }}
    #     privateKey: ${{ secrets.KEY}}
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{  secrets.GITHUB_TOKEN }}
      with:
          tag_name: "release_0.04"
          release_name: Release 0.04
          draft: false
          prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: src/app.py
          asset_name: build
          asset_content_type: application/data
      
